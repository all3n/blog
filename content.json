{"meta":{"title":"all3n's blog","subtitle":"coding like r&b","description":null,"author":"all3n","url":"http://devhc.com","root":"/"},"pages":[{"title":"","date":"2020-11-25T01:25:37.665Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"404.html","permalink":"http://devhc.com/404.html","excerpt":"","text":"all3n's Blog-404页面"},{"title":"","date":"2014-01-12T06:11:00.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"about/index.html","permalink":"http://devhc.com/about/index.html","excerpt":"","text":"About Me2009开始接触编程，初期是主要做php web，2011-2013 做php，14年开始转etl 做了2年，16年至今从事算法相关工作。 1just want coding like R&amp;B style!!&quot;); Skills Pragraming Languages java 8.5 scala 8 python 8 pig 7 PHP 7 Javascript 7 C++/C 6 Big Data Framework hadoop spark kafka hive zookeeper spring docker Machine Learning / Deep Learning web Framework play framework django yii ide vim JetBrains(idea,PyCharms,…)"},{"title":"","date":"2020-11-25T01:25:37.665Z","updated":"2020-11-25T01:25:37.665Z","comments":false,"path":"categories/index.html","permalink":"http://devhc.com/categories/index.html","excerpt":"","text":""},{"title":"Deep Learning","date":"2019-09-22T13:22:12.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"resource/deep-learning.html","permalink":"http://devhc.com/resource/deep-learning.html","excerpt":"","text":"CS231 计算机视觉课程网易云课堂 Andrew Ng深度学习(Autumn 2018)bilibili"},{"title":"resource","date":"2019-09-22T13:06:38.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"resource/index.html","permalink":"http://devhc.com/resource/index.html","excerpt":"","text":"MachineLearningDeepLearning"},{"title":"Machine Learning","date":"2019-09-22T13:22:12.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"resource/machine-learning.html","permalink":"http://devhc.com/resource/machine-learning.html","excerpt":"","text":"Google Machine Learninggoogle 机器学习 李宏毅机器学习讲解比较通俗易懂，中文授课Youtubebilibili 2017bilibili 2019 林轩田机器学习基石(国语)bilibili 网易云课堂汇总Andrew ng,李宏毅,cs231n,带字幕link MachineLearning CS229 Stanford Andrew Ng08年的经典视频，板书形式，偏公式推导，初学不易看懂，可以先看coursera版本再来看这个课程主页YoutubeBilibili Coursera比cs229 简化许多，比较易懂,适合入门link"},{"title":"","date":"2020-11-25T01:25:37.665Z","updated":"2020-11-25T01:25:37.665Z","comments":false,"path":"tags/index.html","permalink":"http://devhc.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"JsonCpp Guide","slug":"cpp-libs-jsoncpp","date":"2019-10-11T02:06:12.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"cpp/libs/cpp-libs-jsoncpp/","link":"","permalink":"http://devhc.com/cpp/libs/cpp-libs-jsoncpp/","excerpt":"","text":"Github Documentation Official ApiDoc 新版用法 jsoncpp WikiBook 该文档是老版本写法 Install Build From Source 12345mkdir buildcd buildcmake -DCMAKE_INSTALL_PREFIX=/opt/cpplibs ..makemake install 使用包管理工具 缺点不能灵活控制版本apt-get install libjsoncpp-dev Examplesjson_v1.cpp123456789101112131415161718192021222324#include &lt;iostream&gt;#include &lt;json/json.h&gt;#include &lt;string&gt;using namespace std;int main(int argc, char* argv[])&#123; string jsonStr = \"&#123;\\\"name\\\": \\\"xxx\\\", \\\"array\\\": [\\\"a\\\", \\\"b\\\", \\\"c\\\"], \\\"obj\\\": &#123;\\\"k\\\" : \\\"v\\\"&#125;&#125;\"; Json::Reader reader; Json::Value value; if (reader.parse(jsonStr, value)) &#123; // read str field cout&lt;&lt;value[\"name\"].asString()&lt;&lt;endl; // read array field for(int i = 0; i &lt; value[\"array\"].size(); i++)&#123; cout&lt;&lt;i&lt;&lt;\":\"&lt;&lt;value[\"array\"][i].asString()&lt;&lt;endl; &#125; // read obj field cout&lt;&lt;value[\"obj\"][\"k\"].asString()&lt;&lt;endl; &#125; return 0;&#125; compile:g++ -I/opt/cpplibs/include/ -o json_v1 json_v1.cpp /opt/cpplibs/lib/libjsoncpp.a &amp;&amp; ./json_v1 output 1234567891011121314json_v1.cpp: In function ‘int main(int, char**)’:json_v1.cpp:20:18: warning: ‘Reader’ is deprecated: Use CharReader and CharReaderBuilder instead [-Wdeprecated-declarations] Json::Reader reader; ^~~~~~In file included from /data/cpplibs/include/jsoncpp/json/json.h:11:0, from json_v1.cpp:10:/data/cpplibs/include/jsoncpp/json/reader.h:35:83: note: declared here class JSONCPP_DEPRECATED(&quot;Use CharReader and CharReaderBuilder instead&quot;) JSON_API Reader &#123; ^~~~~~xxx0:a1:b2:cv 注意这里使用老版本reader api会引起警告 Example New Apijson_v2.cpp1234567891011121314151617181920212223242526272829303132333435#include &lt;iostream&gt;#include &lt;json/json.h&gt;#include &lt;string&gt;#include &lt;memory&gt;using namespace std;int main(int argc, char* argv[])&#123; string jsonStr = \"&#123;\\\"name\\\": \\\"xxx\\\", \\\"array\\\": [\\\"a\\\", \\\"b\\\", \\\"c\\\"], \\\"obj\\\": &#123;\\\"k\\\" : \\\"v\\\"&#125;&#125;\"; Json::Value value; // parse JSONCPP_STRING errs; Json::CharReaderBuilder readerBuilder; std::unique_ptr&lt;Json::CharReader&gt; const reader(readerBuilder.newCharReader()); bool res = reader-&gt;parse(jsonStr.c_str(), jsonStr.c_str() + jsonStr.length(), &amp;value, &amp;errs); if (res &amp;&amp; errs.empty()) &#123; // read str field cout&lt;&lt;value[\"name\"].asString()&lt;&lt;endl; // read array field for(int i = 0; i &lt; value[\"array\"].size(); i++)&#123; cout&lt;&lt;i&lt;&lt;\":\"&lt;&lt;value[\"array\"][i].asString()&lt;&lt;endl; &#125; // read obj field cout&lt;&lt;value[\"obj\"][\"k\"].asString()&lt;&lt;endl; &#125;else&#123; cout&lt;&lt;\"json parse fail:\"&lt;&lt;errs&lt;&lt;endl; &#125; return 0;&#125; 源码方式g++ -I/opt/cpplibs/include/ -o json_v2 json_v2.cpp /opt/cpplibs/lib/libjsoncpp.a &amp;&amp; ./json_v2 如果使用包管理共享库方式编译g++ -I/usr/include/jsoncpp -ljsoncpp -o json_v2 json_v2.cpp静态库方式编译g++ -I/usr/include/jsoncpp -ljsoncpp -o json_v2 json_v2.cpp /usr/lib/x86_64-linux-gnu/libjsoncpp.a output 已经没有警告了 12345xxx0:a1:b2:cv Json::Value 判断类型 bool isXxx() isNull isBool isInt isInt64 isNumbeic isString isObject isArray 转换原生类型 asXxx() asInt asInt64 asBool asDouble 访问字段 [] 方式访问 val[“field”] key是否存在 isMember(“field”) 转成格式化字符串 String toStyledString()流操作 读取: Json::parseFromStream 输出: writeString1234567Json::StreamWriterBuilder wbuilder; wbuilder[\"indentation\"] = \"\\t\";std::string document = Json::writeString(wbuilder, root);Json::CharReaderBuilder rbuilder;rbuilder[\"collectComments\"] = false;std::string errs;bool ok = Json::parseFromStream(rbuilder, std::cin, &amp;root, &amp;errs);","categories":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/categories/cpp/"},{"name":"libs","slug":"cpp/libs","permalink":"http://devhc.com/categories/cpp/libs/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/tags/cpp/"}]},{"title":"Tensorflow print","slug":"tensorflow-tf-print","date":"2019-09-27T11:39:10.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"tensorflow/framework/tensorflow-tf-print/","link":"","permalink":"http://devhc.com/tensorflow/framework/tensorflow-tf-print/","excerpt":"","text":"tf.Print 该op已经deprecated,目前已经不建议使用 以前大部分使用tf.Print 打印变量类似一下代码 1234some_op = ...some_op = tf.Print(some_op, [tf.shape(some_op), \"some_op:\"])...sess.run(some_op) 这个API已经在新的里面被移除了,使用小写tf.print代替,但是操作方式有点差异 tf.printtf.print没有是一个print operation 123456789101112131415161718192021import tensorflow as tfimport sysprint_ops = []def print_op(*inputs , **kwargs): print_ops.append(tf.print(*inputs, **kwargs))x = tf.range(10)print_op(&quot;x&quot;, x)print_op(&quot;x_no_summarize&quot;, x, summarize = -1)print_op(&quot;x_output_stream&quot;, x, output_stream = sys.stdout)# tf1.13开始支持 文件 file:// 开头print_op(&quot;x_file&quot;, x, output_stream = &quot;file:///tmp/debug.log&quot;)with tf.Session() as sess: with tf.control_dependencies(print_ops): b = x * 3 print(sess.run(b)) x [0 1 2 … 7 8 9]x_no_summarize [0 1 2 3 4 5 6 7 8 9]x_output_stream [0 1 2 … 7 8 9][ 0 3 6 9 12 15 18 21 24 27] 12cat /tmp/debug.log x_file [0 1 2 ... 7 8 9] tf.print eager 模式 单个tensor 123tf.compat.v1.enable_eager_execution()tensor = tf.range(10)tf.print(tensor, output_stream=sys.stderr) 多个tensor 123tf.compat.v1.enable_eager_execution()tensor = tf.range(10)tf.print(&quot;tensors:&quot;, tensor, &#123;2: tensor * 2&#125;, output_stream=sys.stdout) 函数内 1234567891011import tensorflow as tfimport systf.enable_eager_execution()@tf.contrib.eager.defundef f(): tensor = tf.range(10) tf.print(&quot;debug:&quot;, tensor, output_stream=sys.stderr) return tensorrange_tensor = f()","categories":[{"name":"tensorflow","slug":"tensorflow","permalink":"http://devhc.com/categories/tensorflow/"},{"name":"framework","slug":"tensorflow/framework","permalink":"http://devhc.com/categories/tensorflow/framework/"}],"tags":[{"name":"tensorflow","slug":"tensorflow","permalink":"http://devhc.com/tags/tensorflow/"}]},{"title":"微积分","slug":"calculas","date":"2019-09-26T15:14:54.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"math/calculas/","link":"","permalink":"http://devhc.com/math/calculas/","excerpt":"","text":"微积分3Blue1Brown 微积分的本质bilibili 极限和无穷小导数一个函数在某一点的导数描述了这个函数在这一点附近的变化率导数的本质是通过极限的概念对函数进行局部的线性逼近。当函数 ${\\displaystyle f}$ 的自变量在一点 ${\\displaystyle x_{0}} $上产生一个增量 ${\\displaystyle h}$ 时，函数输出值的增量与自变量增量 ${\\displaystyle h}$的比值在 ${\\displaystyle h}$趋于0时的极限如果存在，即为 ${\\displaystyle f}$在 ${\\displaystyle x_{0}}$处的导数，记作 ${\\displaystyle f’(x_{0})}$、 ${\\displaystyle {\\frac {\\mathrm {d} f}{\\mathrm {d} x}}(x_{0})}$或 $\\left.{\\frac {d f}{d x}}\\right|{x=x_{0}}$ 导数的定义：f在x0点的导数$$ f’(x_0)=\\lim_{x \\to x_0}\\frac{f(x)-f(x_0)}{x - x_0} $$ 几何意义：相当于曲线该点切线斜率 几何意义 P0点斜率为$\\alpha$,在微分中让x变化一个很小的一个值$\\Delta x$,y变化了$\\Delta y$, 当$\\Delta x$变的无穷小时候,$\\frac{\\Delta y}{\\Delta x}$就逼近该点的真实斜率$\\tan \\alpha=\\lim_{\\Delta x \\to 0} \\tan \\varphi=\\lim_{\\Delta x \\to 0} \\frac{f(x_0 + \\Delta x)-f(x_0)}{\\Delta x}$$$ \\Delta x\\to 0， \\varphi \\to \\alpha $$ 微分微分学主要研究的是在函数自变量变化时如何确定函数值的瞬时变化率（导数或微商）。换言之，计算 导数 的方法就叫 微分 积分积分是微分的逆运算，即从导数推算出原函数，又分为定积分与不定积分。 定积分: 几何意义等价函数下方面积 $\\int_a^b f(x),\\mathrm{d}x$ 不定积分 原函数 第一基本定理设 $ a,b\\in {\\mathbb {R}}$， $ {\\displaystyle f:[a,b]\\mapsto \\mathbb {R} }$为连续函数，对所有的 $ x\\in [a,b]$，定义函数 F 如下： ${\\displaystyle F(x)=\\int _{a}^{x}f(t)dt}$则 F 在闭区间 [a,b] 连续，并在开区间 (a, b)可微， 且对所有在开区间 (a, b) 中的 x，有 $ F’(x)=f(x)$ 第二基本定理：如果函数 x f是闭区间 [a,b] 上的连续函数，F 是 f 在 [a,b] 上的一个反导函数，那么有${\\displaystyle \\int _{a}^{b}f(x),\\mathrm {d} x=F(b)-F(a)} $ Fundamental_theorem_of_calculus_(animation) 偏导数一个多变量的函数的偏导数（英语：partial derivative）是它关于其中一个变量的导数，而保持其他变量恒定（相对于全导数，在其中所有变量都允许变化）∂代表偏导符号,是一个弯曲的d，称为偏导数符号。为了把它与字母d区分，∂有时读作“der”、“del”、“dah”或“偏”，而不是“dee”函数f可以解释为y为自变量而x为常数的函数： $f(x,y) = f_x(y) = x^2 + xy + y^2$f在y方向上的变化： $\\frac {\\partial f}{\\partial y}(x,y)=x+2y$ 符号 d: 微分学中的符号dx,dy等,是由莱布尼茨首先使用.d源自拉丁语中“差”(Differentia)的第一个字母 $\\int$: 积分符号亦由莱布尼茨所创,它是拉丁语”总和”(Summa)的第一个字母s的伸长(和Σ有相同的意义) 常见导数 幂函数的导数： $\\frac{d}{dx}x^{r}=rx^{r-1}$ 指数函数导数 是它自 指数函数:$e^{x}$: $\\frac{d}{dx}e^x=e^{x}$ 一般的指数函数:$\\frac{d}{dx}a^x = \\ln(a)a^x$ 三角函数的导数:仍然是三角函数,或者由三角函数构成 $ \\frac {d}{dx}\\sin(x)=\\cos(x) $ $ \\frac {d}{dx}\\cos(x)=-\\sin(x)$ $ \\frac {d}{dx}\\tan(x)=\\sec ^{2}(x)={\\frac {1}{\\cos ^{2}(x)}}=1+\\tan ^{2}(x)$ $ \\frac {d }{d x}\\cot(x)=-\\csc ^{2}(x)=-{\\frac {1}{\\sin ^{2}(x)}} $ 链式法则 $(f\\circ g)’(x)=f’(g(x))g’(x).$ 考虑函数z = f(x, y)，其中x = g(t)，y = h(t)，g(t)和h(t)是可微函数，那么： ${\\ dz \\over dt}={\\partial z \\over \\partial x}{dx \\over dt}+{\\partial z \\over \\partial y}{dy \\over dt}.$ 应用泰勒级数$f(x)=f(a)+{\\frac {f’(a)}{1!}}(x-a)+{\\frac {f^2(a)}{2!}}(x-a)^{2}+\\cdots +{\\frac {f^(a)}{n!}}(x-a)^{n}+R_{n}(x)$一般在机器学习中用到的是 一阶展开:(梯度下降) $f(x)=f(a)+f’(a)(x-a)$ 二阶展开:(牛顿法) $f(x)=f(a)+f’(a)(x-a)+{\\frac {f^2(a)}{2}}(x-a)^{2}$ 泰勒公式的目的是为了用一个多项式逼近一个函数让多项式每一阶导数和函数的导数相同拉格朗日型余项:$R_{n}(x)={\\frac {f^NaN(\\theta )}{(n+1)!}}(x-a)^NaN$","categories":[{"name":"math","slug":"math","permalink":"http://devhc.com/categories/math/"}],"tags":[{"name":"math","slug":"math","permalink":"http://devhc.com/tags/math/"}]},{"title":"install kubernetes in china","slug":"k8s-install-k8s","date":"2019-09-09T02:41:21.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"container/kubernetes/k8s-install-k8s/","link":"","permalink":"http://devhc.com/container/kubernetes/k8s-install-k8s/","excerpt":"","text":"install kubernets in china官方文档 1. 环境相关设置 关闭swap然后需要禁用swap文件，这是Kubernetes的强制步骤。实现它很简单，编辑/etc/fstab文件，注释掉引用swap的行 去掉开机挂载swap如果不重启 可以sudo swapoff -a 可以直接关掉对于禁用swap内存，主要是为了性能考虑，具体原因可以查看Github上的Issue：Kubelet/Kubernetes should work with Swap Enabled。 关闭SELinux，修改SELINUX属性 #setenforce 0#vi /etc/sysconfig/selinuxSELINUX=disabled 设置iptables #vi /etc/sysctl.d/k8s.confnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1vm.swappiness=0 同iptablessysctl –system 2. install dockeruse aliyun docker repo 1curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun 3. install kubelets kubeadm kubectl1234567891011121314install_dep()&#123; cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/enabled=1gpgcheck=1repo_gpgcheck=1gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF setenforce 0 yum install -y kubelet kubeadm kubectl systemctl enable kubelet &amp;&amp; systemctl start kubelet&#125; 4. 初始化master节点首选配置pod network 1234567891011cat &lt;&lt;EOF&gt; /etc/cni/net.d/10-flannel.conf&#123;&quot;name&quot;:&quot;cbr0&quot;,&quot;type&quot;:&quot;flannel&quot;,&quot;delegate&quot;: &#123;&quot;isDefaultGateway&quot;: true&#125;&#125;EOFmkdir /usr/share/oci-umount/oci-umount.d -pmkdir /run/flannel/cat &lt;&lt;EOF&gt; /run/flannel/subnet.envFLANNEL_NETWORK=10.244.0.0/16FLANNEL_SUBNET=10.244.0.1/24FLANNEL_MTU=1450FLANNEL_IPMASQ=trueEOF 初始化master集群注意在国内一定要设置 –image-repository 不然默认gcr.io 拉不下来推荐azure (支持gcr.io,quay.io) k8s.gcr.io微软azure镜像= gcr.azk8s.cn/google_containers= registry.aliyuncs.com/google_containers quay.ioquay.azk8s.cn gcr.io 镜像有几个 一个是阿里云，还有一个是微软azure(推荐azure) 12345kubeadm init --pod-network-cidr=10.244.0.0/16 --image-repository gcr.azk8s.cn/google_containers --kubernetes-version v1.15.3 mkdir -p $HOME/.kubesudo cp -i -f /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config 安装网络pods 插件 有多种选择 这里使用是flannel 1kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/62e44c867a2846fefb68bd5f178daf4da3095ccb/Documentation/kube-flannel.yml 安装dashboard 1kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml 执行完会有一个join的命令用于新node加入集群 可以记下来如果之后忘记可以在master节点执行 kubeadm token create –print-join-command 获得 执行kubectl get nodes 查看节点是否正常查看日志journalctl -f -u kubelet node在子节点安装kubeadm,kubectl,kubelet后执行master安装时候出现的join 命令kubeadm join ip:port –token YOU_TOKEN –discovery-token-ca-cert-hash sha256:YOU_TOKEN_HASH","categories":[{"name":"container","slug":"container","permalink":"http://devhc.com/categories/container/"},{"name":"kubernetes","slug":"container/kubernetes","permalink":"http://devhc.com/categories/container/kubernetes/"}],"tags":[{"name":"kubernetes","slug":"kubernetes","permalink":"http://devhc.com/tags/kubernetes/"}]},{"title":"ssh 跳板机,Socket 代理","slug":"tools-ssh-proxy","date":"2018-07-15T07:11:55.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"linux/ssh/tools-ssh-proxy/","link":"","permalink":"http://devhc.com/linux/ssh/tools-ssh-proxy/","excerpt":"SSH Agent forwardingssh -A user@host需要先ssh-add ~/.ssh/id_rsa 或者修改 ~/.ssh/config 123Host * ForwardAgent yes ForwardX11 yes 登录之后目标服务器 env会有SSH_AUTH_SOCK 变量记录与本地key通信的socket","text":"SSH Agent forwardingssh -A user@host需要先ssh-add ~/.ssh/id_rsa 或者修改 ~/.ssh/config 123Host * ForwardAgent yes ForwardX11 yes 登录之后目标服务器 env会有SSH_AUTH_SOCK 变量记录与本地key通信的socket SSH ProxyCommand 跳板机123mkdir -p ~/.ssh/sockets/ssh-add ~/.ssh/id_rsassh-copy-id 跳板机用户@跳板机服务器 配置~/.ssh/config 1234567Host *.xxx.com user YOU_SSH_USER ForwardAgent yes ControlMaster auto ControlPath ~/.ssh/sockets/%r@%h-%p ControlPersist 600 ProxyCommand ssh -q -W %h:%p 跳板机用户@跳板机地址 SSH Tunnel Socket5 代理 网页代理ssh -fTND LOCAL_PROXY_PORT 代理服务器用户@代理服务器地址 然后 SwitchyOmega 配置 LOCAL_PROXY_PORT socket5 代理服务 就可以将web 流量通过socket5 转向代理服务器 SSH 跳板访问mysql等其他服务比如mysql 服务器是 1.2.3.4:3306 本地不能 访问但是代理服务器可以访问 ssh -fN -L3306:1.2.3.4:3306 代理服务器用户@代理服务器地址 查看端口情况: lsof -i:3306 host 要写127.0.0.1mysql -P3306 -h127.0.0.1 -uusername -ppassword","categories":[{"name":"linux","slug":"linux","permalink":"http://devhc.com/categories/linux/"},{"name":"ssh","slug":"linux/ssh","permalink":"http://devhc.com/categories/linux/ssh/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://devhc.com/tags/linux/"},{"name":"ssh","slug":"ssh","permalink":"http://devhc.com/tags/ssh/"}]},{"title":"socket http","slug":"cpp-socket","date":"2018-06-25T10:00:11.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"cpp/socket/cpp-socket/","link":"","permalink":"http://devhc.com/cpp/socket/cpp-socket/","excerpt":"httpdsocket server = socket(PF_INET, SOCK_STREAM, 0) memset struct sockaddr_in name; name.sin_family = AF_INET; name.sin_port = htons(port); name.sin_addr.s_addr = htonl(INADDR_ANY); setsockopt(httpd, SOL_SOCKET, SO_REUSEADDR, &amp;on, sizeof(on))) &lt; 0","text":"httpdsocket server = socket(PF_INET, SOCK_STREAM, 0) memset struct sockaddr_in name; name.sin_family = AF_INET; name.sin_port = htons(port); name.sin_addr.s_addr = htonl(INADDR_ANY); setsockopt(httpd, SOL_SOCKET, SO_REUSEADDR, &amp;on, sizeof(on))) &lt; 0 bind(server,(struct sockaddr *)&amp;name, &amp; namelen) port 如果为0 会sin_port 设置随机端口 listen(server,backlog) while accept client socket pthread_create client socket processs close(server) http 协议 RFC2616","categories":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/categories/cpp/"},{"name":"socket","slug":"cpp/socket","permalink":"http://devhc.com/categories/cpp/socket/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/tags/cpp/"},{"name":"socket","slug":"socket","permalink":"http://devhc.com/tags/socket/"}]},{"title":"pthread","slug":"cpp-pthread","date":"2018-06-25T09:12:01.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"cpp/thread/cpp-pthread/","link":"","permalink":"http://devhc.com/cpp/thread/cpp-pthread/","excerpt":"#pthread 头文件函数声明 123#include&lt;pthread.h&gt;int pthread_create(pthread_t *tidp,const pthread_attr_t *attr,(void*)(*start_rtn)(void*),void *arg);","text":"#pthread 头文件函数声明 123#include&lt;pthread.h&gt;int pthread_create(pthread_t *tidp,const pthread_attr_t *attr,(void*)(*start_rtn)(void*),void *arg); ##编译链接参数-lpthread 返回值若线程创建成功，则返回0。若线程创建失败，则返回出错编号，并且*thread中的内容是未定义的。返回成功时，由tidp指向的内存单元被设置为新创建线程的线程ID。attr参数用于指定各种不同的线程属性。新创建的线程从start_rtn函数的地址开始运行，该函数只有一个万能指针参数arg，如果需要向start_rtn函数传递的参数不止一个，那么需要把这些参数放到一个结构中，然后把这个结构的地址作为arg的参数传入。linux下用C语言开发多线程程序，Linux系统下的多线程遵循POSIX线程接口，称为pthread。 参数第一个参数为指向线程标识符的指针。第二个参数用来设置线程属性。第三个参数是线程运行函数的起始地址。最后一个参数是运行函数的参数。 注意事项因为pthread并非Linux系统的默认库，而是POSIX线程库。在Linux中将其作为一个库来使用，因此加上 -lpthread（或-pthread）以显式链接该库。函数在执行错误时的错误信息将作为返回值返回，并不修改系统全局变量errno，当然也无法使用perror()打印错误信息。","categories":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/categories/cpp/"},{"name":"thread","slug":"cpp/thread","permalink":"http://devhc.com/categories/cpp/thread/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/tags/cpp/"}]},{"title":"cpp Compile Issues","slug":"cpp-cpp-compile-issues","date":"2018-06-25T08:11:01.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"uncategorized/cpp-cpp-compile-issues/","link":"","permalink":"http://devhc.com/uncategorized/cpp-cpp-compile-issues/","excerpt":"cpp compile issuesundefined reference to `clock_gettime’1. add -lrt (glibc &lt; 2.17 ldd --version 查看) 1. 如果glibc &gt; 2.17 可以省略","text":"cpp compile issuesundefined reference to `clock_gettime’1. add -lrt (glibc &lt; 2.17 ldd --version 查看) 1. 如果glibc &gt; 2.17 可以省略","categories":[],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/tags/cpp/"}]},{"title":"Tensorflow Variable 变量","slug":"tensorflow-tf-val","date":"2018-06-14T11:14:13.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"tensorflow/framework/tensorflow-tf-val/","link":"","permalink":"http://devhc.com/tensorflow/framework/tensorflow-tf-val/","excerpt":"Create tf.get_variable 提供名称 和 shape my_variable = tf.get_variable(“my_variable”, [1, 2, 3]) 指定初始化方法 my_int_variable = tf.get_variable(“my_int_variable”, [1, 2, 3], dtype=tf.int32,initializer=tf.zeros_initializer) 通过tensor 初始化，不要指定形状 other_variable = tf.get_variable(“other_variable”, dtype=tf.int32,initializer=tf.constant([23, 42]))","text":"Create tf.get_variable 提供名称 和 shape my_variable = tf.get_variable(“my_variable”, [1, 2, 3]) 指定初始化方法 my_int_variable = tf.get_variable(“my_int_variable”, [1, 2, 3], dtype=tf.int32,initializer=tf.zeros_initializer) 通过tensor 初始化，不要指定形状 other_variable = tf.get_variable(“other_variable”, dtype=tf.int32,initializer=tf.constant([23, 42])) 变量集合1. 程序未链接时候创建 tf.Variable 1. collections 1. tf.GraphKeys.GLOBAL_VARIABLES 多个设备共享 1. tf.GraphKeys.TRAINABLE_VARIABLES 将计算梯度的变量 1. 如果不想参加训练 可以以下两种方式 1. my_local = tf.get_variable(&quot;my_local&quot;, shape=(),collections=[tf.GraphKeys.LOCAL_VARIABLES]) 1. my_non_trainable = tf.get_variable(“my_non_trainable”, shape=(), trainable=False) 1. 添加 不需要显示创建 1. tf.add_to_collection(“my_collection_name”, my_local) 1. 获取集合变量 1. tf.get_collection(“my_collection_name”) 指定变量放置设备1. 放在第2快GPU上 12with tf.device(&quot;/device:GPU:1&quot;): v = tf.get_variable(&quot;v&quot;, [1]) 1. 分布式 123456cluster_spec = &#123; &quot;ps&quot;: [&quot;ps0:2222&quot;, &quot;ps1:2222&quot;], &quot;worker&quot;: [&quot;worker0:2222&quot;, &quot;worker1:2222&quot;, &quot;worker2:2222&quot;] &#125;with tf.device(tf.train.replica_device_setter(cluster=cluster_spec)): v = tf.get_variable(&quot;v&quot;, shape=[20, 20])变量初始化 变量必须初始化才能使用 显式初始化(自己创建图和会话) session.run(tf.global_variables_initializer()) 初始化 tf.GraphKeys.GLOBAL_VARIABLES tf.contrib.slim,tf.estimator.Estimator,Keras 等高级框架会自动初始化 初始化指定变量 session.run(my_variable.initializer) 查询未初始化 print(session.run(tf.report_uninitialized_variables())) Variable &amp;&amp; get_variable Variable 会处理冲突，get_variable 不会1 .Variable 每次会重新创建对象 reuse 无关，get_variable 会之前对象返回 Scope tf.variable_scope 可以让变量有相同的命名，包括tf.get_variable得到的变量，还有tf.Variable的变量 tf.name_scope 为了管理变量 可以让变量有相同的命名，只是限于tf.Variable的变量 get_variable 会忽略name_scope","categories":[{"name":"tensorflow","slug":"tensorflow","permalink":"http://devhc.com/categories/tensorflow/"},{"name":"framework","slug":"tensorflow/framework","permalink":"http://devhc.com/categories/tensorflow/framework/"}],"tags":[{"name":"tensorflow","slug":"tensorflow","permalink":"http://devhc.com/tags/tensorflow/"}]},{"title":"Maven 使用技巧","slug":"java-maven-tips","date":"2018-05-30T06:13:55.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"java/tools/java-maven-tips/","link":"","permalink":"http://devhc.com/java/tools/java-maven-tips/","excerpt":"Maven 使用技巧 多module,分stage 分开打包 目录结构 (a,b 依赖common) assembly commont a b pom.xml assembly/pom.xml 通过参数-Ddeploy.app=a 控制哪个模块","text":"Maven 使用技巧 多module,分stage 分开打包 目录结构 (a,b 依赖common) assembly commont a b pom.xml assembly/pom.xml 通过参数-Ddeploy.app=a 控制哪个模块 1234567891011121314151617181920212223242526272829303132333435 &lt;properties&gt; &lt;deploy.app&gt;a&lt;/deploy.app&gt; &lt;deploy.stage&gt;test&lt;/deploy.stage&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.xxx&lt;/groupId&gt; &lt;artifactId&gt;xxxx-$&#123;deploy.app&#125;&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;descriptors&gt; &lt;descriptor&gt;src/main/assembly/$&#123;deploy.app&#125;.xml&lt;/descriptor&gt; &lt;/descriptors&gt; &lt;outputDirectory&gt;$&#123;project.parent.basedir&#125;/target&lt;/outputDirectory&gt; &lt;finalName&gt;xxxx-$&#123;deploy.app&#125;-assembly-$&#123;project.parent.version&#125;&lt;/finalName&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;assembly-deploy-package&lt;/id&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;single&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 1. src/main/assembly/xx.xml1234567891011121314151617181920212223242526272829303132333435363738&lt;assembly&gt; &lt;id&gt;deploy&lt;/id&gt; &lt;formats&gt; &lt;format&gt;tar.gz&lt;/format&gt; &lt;/formats&gt; &lt;includeBaseDirectory&gt;false&lt;/includeBaseDirectory&gt; &lt;dependencySets&gt; &lt;dependencySet&gt; &lt;useProjectArtifact&gt;true&lt;/useProjectArtifact&gt; &lt;includes&gt; &lt;include&gt;com.xxxx:xxx-$&#123;deploy.app&#125;&lt;/include&gt; &lt;/includes&gt; &lt;/dependencySet&gt; &lt;/dependencySets&gt; &lt;fileSets&gt; &lt;fileSet&gt; &lt;outputDirectory&gt;conf&lt;/outputDirectory&gt; &lt;directory&gt;$&#123;project.parent.basedir&#125;/config/common&lt;/directory&gt; &lt;/fileSet&gt; &lt;fileSet&gt; &lt;outputDirectory&gt;conf&lt;/outputDirectory&gt; &lt;directory&gt;$&#123;project.parent.basedir&#125;/config/$&#123;deploy.app&#125;/common&lt;/directory&gt; &lt;/fileSet&gt; &lt;fileSet&gt; &lt;outputDirectory&gt;conf&lt;/outputDirectory&gt; &lt;directory&gt;$&#123;project.parent.basedir&#125;/config/$&#123;deploy.app&#125;/$&#123;deploy.stage&#125;&lt;/directory&gt; &lt;/fileSet&gt; &lt;fileSet&gt; &lt;outputDirectory&gt;bin&lt;/outputDirectory&gt; &lt;fileMode&gt;0755&lt;/fileMode&gt; &lt;directory&gt;$&#123;project.parent.basedir&#125;/$&#123;deploy.app&#125;/src/main/scripts&lt;/directory&gt; &lt;/fileSet&gt; &lt;fileSet&gt; &lt;outputDirectory&gt;/libs&lt;/outputDirectory&gt; &lt;directory&gt;$&#123;project.parent.basedir&#125;/$&#123;deploy.app&#125;/target/lib&lt;/directory&gt; &lt;/fileSet&gt; &lt;/fileSets&gt;&lt;/assembly&gt; 1. 需要在module pom.xml plugin 加上123456789101112131415161718192021&lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;copy-dependencies&lt;/id&gt; &lt;goals&gt; &lt;goal&gt;copy-dependencies&lt;/goal&gt; &lt;/goals&gt; &lt;phase&gt;prepare-package&lt;/phase&gt; &lt;configuration&gt; &lt;outputDirectory&gt;$&#123;project.build.directory&#125;/lib&lt;/outputDirectory&gt; &lt;includeScope&gt;runtime&lt;/includeScope&gt; &lt;excludeScope&gt;test,provided&lt;/excludeScope&gt; &lt;overWriteReleases&gt;false&lt;/overWriteReleases&gt; &lt;overWriteSnapshots&gt;false&lt;/overWriteSnapshots&gt; &lt;overWriteIfNewer&gt;true&lt;/overWriteIfNewer&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; 1. 编译a test 包:mvn clean package -am -pl assembly -Ddeploy.app=a -Ddeploy.stage=test 1. 编译b prod 包:mvn clean package -am -pl assembly -Ddeploy.app=b -Ddeploy.stage=prod","categories":[{"name":"java","slug":"java","permalink":"http://devhc.com/categories/java/"},{"name":"tools","slug":"java/tools","permalink":"http://devhc.com/categories/java/tools/"}],"tags":[{"name":"maven","slug":"maven","permalink":"http://devhc.com/tags/maven/"},{"name":"compile","slug":"compile","permalink":"http://devhc.com/tags/compile/"}]},{"title":"Linux 使用davmail thunderbird 连接 outlook exchange","slug":"tools-davmail-setup","date":"2018-05-30T06:01:12.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"linux/tools/tools-davmail-setup/","link":"","permalink":"http://devhc.com/linux/tools/tools-davmail-setup/","excerpt":"davmail 配置官网DavMail 是一个Java 编写Exchange 的代理gateway软件,让一般smtp+imap/pop3 客户端可以通过这个代理收发邮件","text":"davmail 配置官网DavMail 是一个Java 编写Exchange 的代理gateway软件,让一般smtp+imap/pop3 客户端可以通过这个代理收发邮件 davmail 安装davmail download unzip -d davmailxxx.zip -d /opt/davmail davmail 配置 创建/opt/davmail/davmail.properties 拷贝官方实例配置 Official Config 如果是服务器注意修改davmail.url 为内部服务器地址 修改davmail.logFilePath=/opt/davmail/davmail.log 将davmail 注册到本地服务 useradd davmail sudo chown -R davmail:davmail /opt/davmail sudo vim /lib/systemd/system/davmail.service 12345678910[Unit]Description=davmail proxy for exchange[Service]User=davmailGroup=davmailType=simpleExecStart=/opt/davmail/davmail.sh /opt/davmail/davmail.propertiesPIDFile=/var/run/davmail.pid[Install]WantedBy=multi-user.target graphical.target systemctl enable davmail systemctl start davmail ps aux|grep davmail 检查服务是否正常 可以通过直接运行 /opt/davmail/davmail.sh /opt/davmail/davmail.properties 查看错误信息 修改/opt/davmail/davmail.sh 123456#!/bin/bashBASE=`dirname $0`BASE=/opt/davmailfor i in $BASE/lib/*; do export CLASSPATH=$CLASSPATH:$i; doneJAVA=`which java`$JAVA -Xmx512M -Dsun.net.inetaddr.ttl=60 -cp $BASE/davmail.jar:$CLASSPATH davmail.DavGateway $1 Thunder bird 配置 STMP Server:localhost Port:1025 UserName: you namee Connection security:Non Authentication Method:Password ,transmitted insecureity IMAP: Server:localhost Port:1143 UserName: you name Connection security:None Authentication Method:Password ,transmitted insecureity","categories":[{"name":"linux","slug":"linux","permalink":"http://devhc.com/categories/linux/"},{"name":"tools","slug":"linux/tools","permalink":"http://devhc.com/categories/linux/tools/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://devhc.com/tags/linux/"},{"name":"tools","slug":"tools","permalink":"http://devhc.com/tags/tools/"}]},{"title":"使用JRebel 对java 应用热部署开发","slug":"java-jrebel-hot-deploy","date":"2018-05-30T04:01:12.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"java/tools/java-jrebel-hot-deploy/","link":"","permalink":"http://devhc.com/java/tools/java-jrebel-hot-deploy/","excerpt":"使用JRebel 对java 应用热部署开发 Java 热更新Java 开发Web Server 相关经常被人吐槽修改代码需要重启服务器，非常不方便,JRebel 是一个非常方便的热更新部署插件. JRebel安装 下载jrebel:https://zeroturnaround.com/software/jrebel/download/#!/have-license/intellij unzip -d /opt jrebel-xxxx-nosetup.zip (xxxx 替换下载版本) java -jar /opt/jrebel/jrebel.jar -set-remote-password 12345678","text":"使用JRebel 对java 应用热部署开发 Java 热更新Java 开发Web Server 相关经常被人吐槽修改代码需要重启服务器，非常不方便,JRebel 是一个非常方便的热更新部署插件. JRebel安装 下载jrebel:https://zeroturnaround.com/software/jrebel/download/#!/have-license/intellij unzip -d /opt jrebel-xxxx-nosetup.zip (xxxx 替换下载版本) java -jar /opt/jrebel/jrebel.jar -set-remote-password 12345678 Jrebel 激活 Activate Code: 通过Facebook 登录 https://my.jrebel.com/ 获取 LisenceServer(By iLanyu) docker run -d -p 8888:8888 ilanyu/golang-reverseproxy IntelJ Idea 安装插件并激活插件 jntelj 安装jrebel 插件:File-Setting-Plugins 安装Jrebel(安装慢可以设置代理下载) 激活Help-&gt;Jrebel-Activation-&gt;LisenceServer http://localhost:8888/uuid-your-gen (uuid 可以https://www.uuidgenerator.net/ 生成) 配置JRebel插件 添加File-Setting-Jrebel-RemoteServer,添加remote server 点击+,name:model-server,url:http://localhost:8000 Server Auth:填写12345678 打开Views -&gt; TopWindow -&gt;Jrebel 视图,勾上热部署模块 在启动脚本加上参数 类似 java -agentpath:/opt/jrebel/lib/libjrebel64.so -Drebel.remoting_plugin=true -Drebel.remoting_port=8000 foo.bar.MyApp 启动Server,在项目修改代码，编译后会自动加载 配置保存自动编译加载 Auto Compile 默认代码保存不会自动加载需要右键编译或者快捷键(Ctrl/Cmd+Shift+F9) 开启保存编译IntelJ Auto Compile","categories":[{"name":"java","slug":"java","permalink":"http://devhc.com/categories/java/"},{"name":"tools","slug":"java/tools","permalink":"http://devhc.com/categories/java/tools/"}],"tags":[{"name":"java","slug":"java","permalink":"http://devhc.com/tags/java/"},{"name":"hotdeploy","slug":"hotdeploy","permalink":"http://devhc.com/tags/hotdeploy/"}]},{"title":"pyspark 解析thrift lzo","slug":"spark-pyspark-process-thrift","date":"2018-05-17T11:12:11.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"bigdata/spark/spark-pyspark-process-thrift/","link":"","permalink":"http://devhc.com/bigdata/spark/spark-pyspark-process-thrift/","excerpt":"PySpark 解析Thrift Lzo 类型数据 包依赖 libs elephant-bird-core-4.6.jar elephant-bird-hadoop-compat-4.6.jar libthrift-0.x.x.jar (x.x 换成你的版本) python依赖 pkg 依赖文件 gen_py thrift 生成(如果有注释中文需要在生成代码头部加上 #-*- coding: utf-8 -* ) six.py (Copy From python site-package) thrift (Copy From python site-package) 将python依赖打成zip 方便加载 zip -r ../pkg.zip .","text":"PySpark 解析Thrift Lzo 类型数据 包依赖 libs elephant-bird-core-4.6.jar elephant-bird-hadoop-compat-4.6.jar libthrift-0.x.x.jar (x.x 换成你的版本) python依赖 pkg 依赖文件 gen_py thrift 生成(如果有注释中文需要在生成代码头部加上 #-*- coding: utf-8 -* ) six.py (Copy From python site-package) thrift (Copy From python site-package) 将python依赖打成zip 方便加载 zip -r ../pkg.zip . python 脚本利用elephantbird RawMultiInputFormat 获取thrift bytes内容然后通过python thrift deserialize 转换成python 对象 12345678910111213from pyspark import SparkConf, SparkContextimport thriftfrom gen_py.xxx.ttypes import ThriftObjfrom thrift.TSerialization import deserializeconf = SparkConf()sc = SparkContext(conf = conf)logpath=\"/youhdfspath/xxx.thrift.lzo\"log = sc.newAPIHadoopFile(logpath,'com.twitter.elephantbird.mapreduce.input.RawMultiInputFormat','org.apache.hadoop.io.LongWritable','com.twitter.elephantbird.mapreduce.io.BinaryWritable')rdd = log.map(lambda x:deserialize(ThriftObj(),x[1]))rdd.saveAsTextFile(\"testfile\") shell 脚本 123456789101112131415161718192021export SCRIPT_HOME=$(cd \"`dirname $0`/\"; pwd)NAME=testOUTPUT=testfileLIBS=`ls $SCRIPT_HOME/libs/*`LIBSTR=\"\"for lib in $LIBS;do LIBSTR=\"$LIBSTR,$lib\"doneLIBSTR=$&#123;LIBSTR:1&#125;hadoop fs -rm -r -f $OUTPUTspark-submit \\ --master yarn \\ --deploy-mode cluster \\ --jars $LIBSTR \\ --py-files $SCRIPT_HOME/pkg.zip \\ --name \"[pyspark][$NAME]\" \\ $NAME.py","categories":[{"name":"bigdata","slug":"bigdata","permalink":"http://devhc.com/categories/bigdata/"},{"name":"spark","slug":"bigdata/spark","permalink":"http://devhc.com/categories/bigdata/spark/"}],"tags":[{"name":"spark","slug":"spark","permalink":"http://devhc.com/tags/spark/"},{"name":"pyspark","slug":"pyspark","permalink":"http://devhc.com/tags/pyspark/"},{"name":"thrift","slug":"thrift","permalink":"http://devhc.com/tags/thrift/"}]},{"title":"cpp 常用命令","slug":"cpp-cpp-basic","date":"2018-04-20T06:22:41.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"cpp/lang/cpp-cpp-basic/","link":"","permalink":"http://devhc.com/cpp/lang/cpp-cpp-basic/","excerpt":"cpp 常用命令basic compile g++ -c -o a.o a.cpp -I includeDir -L libraryDir -lxx sharead xx library lxx static xx library","text":"cpp 常用命令basic compile g++ -c -o a.o a.cpp -I includeDir -L libraryDir -lxx sharead xx library lxx static xx library create static library ar ru libxxx.a a.o b.o c.o create shared library Linux: g++ –shared -fPIC -o libxxx.so a.o b.o c.o MacOs: g++ -dynamiclib -fPIC -o libxxx.dylib a.o b.o c.o show lib dependency Linux:ldd MacOs:otool -L include path:echo | g++ -v -x c++ -E - /etc/ld.so.conf ldconfig -p","categories":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/categories/cpp/"},{"name":"lang","slug":"cpp/lang","permalink":"http://devhc.com/categories/cpp/lang/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/tags/cpp/"}]},{"title":"pig basic","slug":"bigdata-pig-pig-basic","date":"2018-03-18T03:31:22.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"bigdata/pig/bigdata-pig-pig-basic/","link":"","permalink":"http://devhc.com/bigdata/pig/bigdata-pig-pig-basic/","excerpt":"","text":"Pig BasicPig 官网Apache Pig 是一个高级过程语言，适合于使用 Hadoop 和 MapReduce 平台来查询大型半结构化数据集。通过允许对分布式数据集进行类似 SQL 的查询，Pig 可以简化 Hadoop 的使用pig 语法关键字是不分大小写 Pig启动模式 local mapreduce spark通过 pig -x local xxx.pig 指定 本地测试本地一个目录先创建一个文件比如data.txt data.txt123w,10,6h,12,2h,14,1 pig -x local 进入交互模式 (下面省略中间执行日志) 1234567grunt&gt; DATA = LOAD &apos;data.txt&apos; USING PigStorage(&apos;,&apos;) AS (name: chararray, age:int, num: float);grunt&gt; DUMP DATA;(w,10,6.0)(h,12,2.0)(h,14,1.0)grunt&gt; describe DATA;DATA: &#123;name: chararray,age: int,num: float&#125; 执行参数 Properties通过-D:等价设置环境变量PIG_OPTS, export PIG_OPTS=–Dmapreduce.task.profile=true或者通过文件pig -P mypig.properties 常见mapreduce参数设置 hadoop相关配置 1pig -Dmapreduce.job.cache.files=\"/user/hadoop/dict.txt#dict.txt\" xxx.pig 变量 -p -param 替换pig文件中变量pig -p INPUT=”data.txt” xx.pig log4j 配置默认是INFO 日志特别多，可以通过log4j文件改成ERROR pig-log4j.properties1234log4j.rootLogger=ERROR,stdoutlog4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=%d %p [%c] - %m%n pig -log4jconf ./pig-log4j.properties -x local set主要用于job名称 job并行度 等job相关设置 12SET job.name &apos;my job&apos;;SET default_parallel 100; PigLatinpig 文件是使用PigLatin语法描述注意pig里 字符串都是 单引号 结构 tuple 有序字段集合 (name, 18) bag tuple 的组合 map key/value pair [ key#value &lt;, key#value …&gt; ] [name#John,phone#5551212] 引入包1REGISTER &apos;hdfs://hadoop/piglibs/*.jar&apos;; 加载数据pig记载数据通过Loader方式 apache内置多种Loader TextLoaderload 一行为一个字段默认TextLoader是文本TSV分割数据(支持gzip,bzip)TSV: 分割A = LOAD ‘student’ USING PigStorage(‘\\t’) AS (name: chararray, age:int, gpa: float); JsonLoader 官方这个不是太好用 不支持 深层次jsona = load ‘a.json’ using JsonLoader(‘a0:int,a1:{(a10:int,a11:chararray)},a2:(a20:double,a21:bytearray),a3:[chararray]’); 第三方Loadertwitter elephantbird sequenceFileLoader 1234567pairs = LOAD &apos;$INPUT&apos; USING com.twitter.elephantbird.pig.load.SequenceFileLoader (&apos;-c com.twitter.elephantbird.pig.util.IntWritableConverter&apos;,&apos;-c com.twitter.elephantbird.pig.util.TextConverter&apos;) as (key: int,value: chararray); Thrift Lzo(Block/Base64) 12DATA = LOAD &apos;$INPUT&apos; USING com.twitter.elephantbird.pig.load.ThriftPigLoader(&apos;com.xxx.ThriftClasss&apos;); Protobuf 12DATA = LOAD &apos;$INPUT&apos; USING com.twitter.elephantbird.pig.load.ProtobufPigLoader(&apos;com.xxx.protobufClass&apos;); Json (elephant 版本支持嵌套) 12DATA = LOAD &apos;$INPUT&apos; USING com.twitter.elephantbird.pig.load.JsonLoader(&apos;-nestedLoad&apos;); 注意 等号 左右 要有一个空格 不然会语法错误 1INPUT_LOG = LOAD &apos;$XXX_LOG&apos; USING org.apache.parquet.pig.ParquetLoader(); 遍历数据1INPUT_LOG = FOREACH INPUT_LOG GENERATE time, uid; 过滤数据1FILTERED_LOG = FILTER INPUT_LOG BY isValid == 1; join 数据 inner joinalias = JOIN alias BY {expression|’(‘expression [, expression …]’)’} (, alias BY {expression|’(‘expression [, expression …]’)’} …) [USING ‘replicated’ | ‘bloom’ | ‘skewed’ | ‘merge’ | ‘merge-sparse’] [PARTITION BY partitioner] [PARALLEL n]; inner join 和sql inner join一样只有两边都有 才保留 12345678910111213141516171819grunt&gt; DATA = LOAD &apos;data.txt&apos; USING PigStorage(&apos;,&apos;) as (name:chararray, age: int);grunt&gt; DUMP DATA;(jake,10)(lily,12)(john,14)(kite,13)grunt&gt; WEIGHT = LOAD &apos;weight.txt&apos; USING PigStorage(&apos;,&apos;) as (name:chararray, weight: int);grunt&gt; DUMP WEIGHT;(jake,40)(lily,42)(john,54)(mike,64)grunt&gt; JOIN_DATA = JOIN DATA BY name,WEIGHT BY name;grunt&gt; DUMP JOIN_DATA;(jake,10,jake,40)(john,14,john,54)(lily,12,lily,42)grunt&gt; DESCRIBE JOIN_DATA;JOIN_DATA: &#123;DATA::name: chararray,DATA::age: int,WEIGHT::name: chararray,WEIGHT::weight: int&#125; outer joinalias = JOIN left-alias BY left-alias-column [LEFT|RIGHT|FULL] [OUTER], right-alias BY right-alias-column [USING ‘replicated’ | ‘bloom’ | ‘skewed’ | ‘merge’] [PARTITION BY partitioner] [PARALLEL n]; out join和sql outer join概念类似分LEFT,RIGHT,FULL分别是保留左边全部，保留右边全部，保留两边全部LEFT,RIGHT,FULL [OUTER] OUTER 可以省略 123456789101112131415161718192021grunt&gt; JOIN_DATA = JOIN DATA BY name RIGHT, WEIGHT BY name;grunt&gt; DUMP JOIN_DATA;(jake,10,jake,40)(john,14,john,54)(lily,12,lily,42)(,,mike,64)grunt&gt; JOIN_DATA = JOIN DATA BY name LEFT, WEIGHT BY name;grunt&gt; DUMP JOIN_DATA;(jake,10,jake,40)(john,14,john,54)(kite,13,,)(lily,12,lily,42)grunt&gt; JOIN_DATA = JOIN DATA BY name FULL, WEIGHT BY name;grunt&gt; DUMP JOIN_DATA;(jake,10,jake,40)(john,14,john,54)(kite,13,,)(lily,12,lily,42)(,,mike,64) group 数据alias = GROUP alias { ALL | BY expression} [, alias ALL | BY expression …] [USING ‘collected’ | ‘merge’] [PARTITION BY partitioner] [PARALLEL n]; ALL, group ALL to one groupB = GROUP A ALL; FieldB = GROUP A BY f1; TupleB = GROUP A BY (f1, f2); 1234567891011121314A = load &apos;student&apos; AS (name:chararray,age:int,gpa:float);DESCRIBE A;A: &#123;name: chararray,age: int,gpa: float&#125;DUMP A;(John,18,4.0F)(Mary,19,3.8F)(Bill,20,3.9F)(Joe,18,3.8F)B = GROUP A BY age;DESCRIBE B;B: &#123;group: int, A: &#123;name: chararray,age: int,gpa: float&#125;&#125; 存储STORE alias INTO ‘directory’ [USING function];和加载数据类似分隔符 tsv: PigStorageAvroStorage 第三方:twitterelephant bird store LzoJsonStorage SequenceFileStorage LzoThriftBlockPigStorage LzoThriftB64LinePigStorage LzoProtobufBlockPigStorage LzoProtobufB64LinePigStorage STORE D INTO ‘mysortedcount’ USING PigStorage(); 其他 查看描述： DESCRIBE DATA; 打印（只建议在少数据量时候使用，大数据建议先LIMIT再DUMP） DUMP DATA; LIMIT alis = LIMIT alias n; 排序 alias = ORDER alias BY { * [ASC|DESC] | field_alias [ASC|DESC] [, field_alias [ASC|DESC] …] } [PARALLEL n]; X = ORDER A BY age DESC; 采样 SAMPLE alias size; size 0~1 X = SAMPLE A 0.01; 常见函数UDF 用户自定义函数全称 User Defined Functions 第三方实用 UDF： DATAFU 自定义UDF","categories":[{"name":"bigdata","slug":"bigdata","permalink":"http://devhc.com/categories/bigdata/"},{"name":"pig","slug":"bigdata/pig","permalink":"http://devhc.com/categories/bigdata/pig/"}],"tags":[{"name":"pig","slug":"pig","permalink":"http://devhc.com/tags/pig/"}]},{"title":"cpp-primer-6-function","slug":"read-notes-cpp-primer-cpp-primer-6-function","date":"2017-04-20T06:01:00.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-6-function/","link":"","permalink":"http://devhc.com/read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-6-function/","excerpt":"Function function type funname(type arg1,…) 函数指针 函数名就是函数指针 12345int ab(int x);int (*p)(int) *p = ab;typedef int (*p_ab)(int);p(12);(*p)(12);","text":"Function function type funname(type arg1,…) 函数指针 函数名就是函数指针 12345int ab(int x);int (*p)(int) *p = ab;typedef int (*p_ab)(int);p(12);(*p)(12); 函数指针数组 int (*p[5])(int) *parr;","categories":[{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/categories/read-notes/"},{"name":"cpp-primer","slug":"read-notes/cpp-primer","permalink":"http://devhc.com/categories/read-notes/cpp-primer/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/tags/cpp/"},{"name":"cpp-primer","slug":"cpp-primer","permalink":"http://devhc.com/tags/cpp-primer/"},{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/tags/read-notes/"}]},{"title":"cpp-primer-8:exception","slug":"read-notes-cpp-primer-cpp-primer-8-exception","date":"2017-04-20T06:01:00.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-8-exception/","link":"","permalink":"http://devhc.com/read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-8-exception/","excerpt":"exception 异常处理123456try&#123; xxxx throw X_Exception(&quot;&quot;);&#125;catch(E_Exception &amp;e)&#123; cout&lt;&lt;e.what()&lt;&lt;endl;&#125;","text":"exception 异常处理123456try&#123; xxxx throw X_Exception(&quot;&quot;);&#125;catch(E_Exception &amp;e)&#123; cout&lt;&lt;e.what()&lt;&lt;endl;&#125;","categories":[{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/categories/read-notes/"},{"name":"cpp-primer","slug":"read-notes/cpp-primer","permalink":"http://devhc.com/categories/read-notes/cpp-primer/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/tags/cpp/"},{"name":"cpp-primer","slug":"cpp-primer","permalink":"http://devhc.com/tags/cpp-primer/"},{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/tags/read-notes/"}]},{"title":"cpp-primer-9:template","slug":"read-notes-cpp-primer-cpp-primer-9-template","date":"2017-04-20T06:01:00.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-9-template/","link":"","permalink":"http://devhc.com/read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-9-template/","excerpt":"template 示例 1234template &lt;class TYPE&gt;TYPE min(TYPE a,TYPE b)&#123; return a &lt; b ? a : b;&#125;","text":"template 示例 1234template &lt;class TYPE&gt;TYPE min(TYPE a,TYPE b)&#123; return a &lt; b ? a : b;&#125; 模板参数 模板类型参数 class 或者typename 加一个标识符 模板非类型参数 由普通参数声明构成，代表常量表达式 12template &lt;typename Type, int size&gt;Type min(Type (&amp;r_array)[size])&#123;&#125; 显式模板 vector&lt;int&gt;","categories":[{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/categories/read-notes/"},{"name":"cpp-primer","slug":"read-notes/cpp-primer","permalink":"http://devhc.com/categories/read-notes/cpp-primer/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/tags/cpp/"},{"name":"cpp-primer","slug":"cpp-primer","permalink":"http://devhc.com/tags/cpp-primer/"},{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/tags/read-notes/"}]},{"title":"cpp-primer-5:abstract container","slug":"read-notes-cpp-primer-cpp-primer-5-abstact-container","date":"2017-04-20T06:01:00.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-5-abstact-container/","link":"","permalink":"http://devhc.com/read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-5-abstact-container/","excerpt":"抽象容器list &amp;&amp; vector vector 连续内存 顺序容器 随机访问快 list 非连续 基于连表 删除，插入节点方便 使用","text":"抽象容器list &amp;&amp; vector vector 连续内存 顺序容器 随机访问快 list 非连续 基于连表 删除，插入节点方便 使用 set multiset 允许重复 map multimap 允许一个key下多个value","categories":[{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/categories/read-notes/"},{"name":"cpp-primer","slug":"read-notes/cpp-primer","permalink":"http://devhc.com/categories/read-notes/cpp-primer/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/tags/cpp/"},{"name":"cpp-primer","slug":"cpp-primer","permalink":"http://devhc.com/tags/cpp-primer/"},{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/tags/read-notes/"}]},{"title":"cpp-primer-7:class","slug":"read-notes-cpp-primer-cpp-primer-7-classs","date":"2017-04-20T06:01:00.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-7-classs/","link":"","permalink":"http://devhc.com/read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-7-classs/","excerpt":"类 Class定义类定义之后必须接一个分号或者声明 12345class ClassName&#123;&#125;;class ClassName&#123;&#125; a b;","text":"类 Class定义类定义之后必须接一个分号或者声明 12345class ClassName&#123;&#125;;class ClassName&#123;&#125; a b; 数据成员默认都是非静态，不能显式初始化静态可以初始化(类共享) 12345class A&#123; int a; string b; static const int _SIZE = 100;&#125;; 成员函数类中定义函数声明，也可以函数定义 123456class A&#123; void hello(); void hello2()&#123; cout&lt;&lt;&quot;hello&quot;&lt;&lt;endl; &#125;&#125; 访问 public 12345A a;a.name;A * pa = new A;pa-&gt;name; 12//访问静态A::static_field; private 类私有 protected 派生类共享 友元函数 friend 不受 public,private,protected 影响 使得某个函数可以访问 声明 class A; //只声明没有定义 构造函数 没有返回类型构造函数不能为const或者volatile 12345678910111213class Screen&#123;public: Screen(int h=8, int w=12,xx=&quot;afd&quot;): _height(h), _width(8)&#123; &#125;&#125;使用缺省构造函数不需要括号// error Screen a(); 编辑器会认为返回Screen的函数Screen a; const volatile const 定义了就不可以修改 类成员函数const 不可以修改成员 123class A&#123; void xxx() const;&#125;; volatile 编译器无法控制或者监测的 this 指针 指向对象本身 在需要返回对象自身时候使用 返回引用 return *this; 返回指针 return this; 静态成员 没有this指针 类定义时候初始化 A::field 访问 类成员指针 指向类成员a的short 指针 1short Screen::* p = &amp;Screen::height; 静态成员指针 类似普通指针 union1234union &#123; int ival; char cval;&#125; uv; 嵌套类 Tree 嵌套Node, Tree::Node 12345class Tree&#123;public: class Node&#123;&#125; Node * tree;&#125;; 拷贝构造函数 区分普通类型和对象指针类型拷贝 析构函数 ~ClassName(); 无返回类型 delete 相关new开辟的空间 delete 时候不需要判断 是否!=0编辑器隐式执行 不会删除不指向认为对象的指针 操作符重载 istream &amp; operator &gt;&gt; (istream &amp;,string &amp;); 左值 右值 类操作符 省略左值","categories":[{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/categories/read-notes/"},{"name":"cpp-primer","slug":"read-notes/cpp-primer","permalink":"http://devhc.com/categories/read-notes/cpp-primer/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/tags/cpp/"},{"name":"cpp-primer","slug":"cpp-primer","permalink":"http://devhc.com/tags/cpp-primer/"},{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/tags/read-notes/"}]},{"title":"cpp-primer-4:statement","slug":"read-notes-cpp-primer-cpp-primer-4-statment","date":"2017-04-20T06:01:00.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-4-statment/","link":"","permalink":"http://devhc.com/read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-4-statment/","excerpt":"Statement 语句简单语句 空语句 ; 声明语句 int ival; 可以同时声明多个 int ival =1,ival2 = 3; 建议按类型分组声明","text":"Statement 语句简单语句 空语句 ; 声明语句 int ival; 可以同时声明多个 int ival =1,ival2 = 3; 建议按类型分组声明 IF 建议if语句用括号括起来 避免歧义 12345if( condition )&#123; statement&#125;else&#123; statement&#125; switch 注意执行case 直到遇见break为止 for while","categories":[{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/categories/read-notes/"},{"name":"cpp-primer","slug":"read-notes/cpp-primer","permalink":"http://devhc.com/categories/read-notes/cpp-primer/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/tags/cpp/"},{"name":"cpp-primer","slug":"cpp-primer","permalink":"http://devhc.com/tags/cpp-primer/"},{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/tags/read-notes/"}]},{"title":"cpp-primer-1:cpp quick start","slug":"read-notes-cpp-primer-cpp-primer-1-start","date":"2017-04-20T06:01:00.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-1-start/","link":"","permalink":"http://devhc.com/read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-1-start/","excerpt":"Start第一个C++ 程序 hello-world.cpp","text":"Start第一个C++ 程序 hello-world.cpp 123456#include &lt;iostream&gt;using namespace std;int main()&#123; cout&lt;&lt;&quot;hello world!&quot;&lt;&lt;endl; return 0;&#125; 入口函数为main，前面int代表返回类型，return 0 代表程序成功执行 #include 预处理器指示符 using namespace std代表使用std命名空间 C++ 每一条语句后面都是需要加分号; cout 写出到标准输出 cout 是在std 命名空间下的 编译执行 编译: g++ -o hello-word hello-world.cpp 执行程序: ./hello-world 结果如下 hello world! 预处理指示符 使用#开头 #define 定义常量 #define XX 1 避免include 被重复引入 比如在a.h加入 在首次引入之后A_H就会被定义，第二次引入ifndef A_H 条件就会为false 1234#ifndef A_H#define A_H...#endif 其他常量 LINE 当前行 FILE 当前文件名 注释 注释对 /* */ 行注释 // 输入输出 iostream 库提供 cout 终端输入：标准输入 cin 终端输出：标准输出 回车,TAB,空格 会被当做结束标识 cerr 标准错误输出 endl 换行符 ‘\\n’ 操作符 &lt;&lt; 将一个值导向输出流cout/cerr &gt;&gt; 从一个流输出一个变量上 文件流操作 fstream 提供 操作与标准输出类似 文件输出流 ofstream(“filename”) 文件输入流 ifstream(“filename”)","categories":[{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/categories/read-notes/"},{"name":"cpp-primer","slug":"read-notes/cpp-primer","permalink":"http://devhc.com/categories/read-notes/cpp-primer/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/tags/cpp/"},{"name":"cpp-primer","slug":"cpp-primer","permalink":"http://devhc.com/tags/cpp-primer/"},{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/tags/read-notes/"}]},{"title":"cpp-primer-2:data-types","slug":"read-notes-cpp-primer-cpp-primer-2-data-types","date":"2017-04-20T06:01:00.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-2-data-types/","link":"","permalink":"http://devhc.com/read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-2-data-types/","excerpt":"基本数据类型常量 文字常量 不可寻址 nonaddressable 整数型文字常量 20 //十进制 020 //八进制 0x14 //十六进制 缺省 默认有符号int 其他符号 l/L long u/U unsigned f/F float e/E 科学计数法 1E-2","text":"基本数据类型常量 文字常量 不可寻址 nonaddressable 整数型文字常量 20 //十进制 020 //八进制 0x14 //十六进制 缺省 默认有符号int 其他符号 l/L long u/U unsigned f/F float e/E 科学计数法 1E-2 布尔常量 true false 字符常量 ‘a’ ‘2’ null 空字符 特殊字符 需要加\\转义 \\n 换行 \\t 制表符 \\r 回车 &#39; 单引号 \\“ 双引号 字符前面加L代表宽字符 L”a” 变量 变量是数据的名字的内存存储区，可以通过程序对其进行读写和处理。 变量可寻址的 addressable 左值(lvalue)：地址 位置值 (location value) 右值(rvalue)：被读取的值 (read value) 定义 类型 变量名字 变量名 标识符 identifier 特殊keyword 不能用作变量名 定义变量 是未初始化的，值是未定义是一个随机结果，一般建议初始化提供一个初始值。 内置数据类型支持构造函数 int ival = int(); 指针类型 指针中存有另一个对象的地址 使用*标识 123int *pi = 0;int pv = 3;pi = &amp;pv; 特殊支持 void * 不关心类型 只关心地址 void *p = pi; 获取指向内容 *p 字符串类型 c style string:const char * 使用c style string function: #include &lt;cstring&gt; c++ style string #include &lt;string&gt; init string a = “xxx”; string a(“xxx”); string b(a); //copy a string b = a; 操作 连接 1string c = a+b; 获取c style 字符串 1const char * str = s.c_str(); 判断空 12if(s.empty())&#123;&#125; 获取大小 s.size() 替换 1replace(s.begin(),s.end(),&apos;,&apos;,&apos; &apos;) const 限定修饰符 定义变量不可改变 1const char * XXX_BUF_SIZE = 512; const 对象只能赋给 const 对象指针 引用类型 引用类型 reference 有时候又称为别名 alias 12int ival = 1024;int &amp;ival2 = ival; const 引用可以使用不同类型变量初始化 一般用在函数参数上 布尔类型 true/false 布尔类型可以隐式转换为int 1/0，算数值也可以，0或者空指针可以转换为false,其他类型的值可以转化为true 枚举类型 一些列值的集合的类型 比如XXX类型只能有3种类型值A,B,C 1enum XXX&#123;A,B,C&#125;; 缺省情况 每个枚举值都被默认赋值 从0开始赋值 A=0,B=1,C=2 也可以在声明是否制定其值 数组类型 下标访问/索引访问 (下标从0开始) 声明 int a[10]; 显示指定 可以不写维度 int a[] = {0,1,2}; 字符串类型数组 const char c1[] = {‘c’,’p’,’p’}; const char c2[] = “cpp”; c1,c2 不等价 c2 包含一个终止空字符 初始化 不能引用数组 [X] int &amp; iar[] = {a,b,c}; 不能数组初始化另一个数组 int arr[] = ar; 多维数组 int a[2][3] 用大括号方式初始化 其值都是0 数组 与 指针关系 int ia[] = {1，2，3，4}； ia 就是数组第一个元素地址 &amp;ia[0] vector 容器类型 include&lt;vector&gt; 定义指定长度vector vector&lt;int&gt; ivec(10); vector&lt;int&gt; ivec(10 ,-1); //初始化10个元素 每个元素为-1 vector 遍历 12345678910111213141516171819202122232425 if(ivec.empty())&#123; return; &#125; for(int ix = 0; ix &lt; ivec.size(); i++ )&#123; cout &lt;&lt; ivec[i] &lt;&lt;endl; &#125; for(vector&lt;int&gt;::iterator it = ivec.iterator(); it != ivec.end(); i++ )&#123; cout &lt;&lt; * it &lt;&lt;endl; &#125; ``` ## complex 复数1. #include \\&lt;complex&gt;2. complex&lt;double&gt; p(0,7); //0+7i## typedef 名字1. 重新定义类型用于助记 typedef double score;typedef vector vec_int; 123## [volatile](http://en.cppreference.com/w/cpp/language/cv)1. 当一个对象会在编译器控制或检测之外被改变时候，如被系统时钟更新的变量，那么该对象应该被申明成volatile，编译器的优化不能应用在volatile的对象 volatile int xxx; ```pair #include &lt;utility&gt; pair&lt;string,string&gt; author(“name”,”xxxx”); map 的元素","categories":[{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/categories/read-notes/"},{"name":"cpp-primer","slug":"read-notes/cpp-primer","permalink":"http://devhc.com/categories/read-notes/cpp-primer/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/tags/cpp/"},{"name":"cpp-primer","slug":"cpp-primer","permalink":"http://devhc.com/tags/cpp-primer/"},{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/tags/read-notes/"}]},{"title":"cpp-primer-3:expression","slug":"read-notes-cpp-primer-cpp-primer-3-express","date":"2017-04-20T06:01:00.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-3-express/","link":"","permalink":"http://devhc.com/read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-3-express/","excerpt":"表达式定义 由一个或多个操作数构成，应用在操作数是叫做操作符 在一个操作数上交一元操作符（&amp;，*），作用在两个操作数上的叫做2元操作符（+，-）","text":"表达式定义 由一个或多个操作数构成，应用在操作数是叫做操作符 在一个操作数上交一元操作符（&amp;，*），作用在两个操作数上的叫做2元操作符（+，-） 算术操作符 操作符 功能 用法 * 乘 a*b / 除 a/b % 求余 a%b + 加 a+b - 减 a-b 关系操作符 操作符 功能 用法 ! 非 !a &lt; 小于 a&lt;b &lt;= 小于等于 a&lt;=b &gt; 大于 a&gt;b &gt;= 大于等于 a&gt;=b == 等于 a == b != 不等于 a!=b &amp;&amp; 逻辑与 a &amp;&amp; b || 逻辑或 a||b 关系操作符的结果都是布尔值 赋值操作符 =12int a = 123;a = 5; 高精度转低精度会进行隐式类型转换，会损失精度复合赋值 a+=b 递增 ++ 递减 – a++ 返回a a值加1 // ++ 在后 返回原结果 ++a 返回a+1 a值加1 // ++ 在前 返回结算后结果 条件操作符1bool isEqual = !strcmp(str1,str2)? true : false; sizeof 操作符 返回字节长度 用法 object 时候可以省掉括号 sizeof (type) sizeof (object) sizeof object 示例 123int ia[] = &#123;0,1,2&#125;;size_t array_size = sizeof ia;size_t ele_size = array_size / sizeof(int); 注意: size(ptr) 返回是指针长度 而不是指针指向的长度 string 类型 sizeof 与内容无关 new/delete 操作符 系统为每个程序运行时候提供可用的内存池，这个被称为空闲存储区(free store)或堆(heap) new 分配对象 返回对象指针 delete 作用在对象指正上，如果在对数组类型需要加[] 1234int * p = new int[10];int * pi = new int(100);delete [] p;delete pi; 逗号操作符 从左往右计算 结果为最右边表达式的值 位操作符 操作符 功能 用法 ~ 按位非 ~a &lt;&lt; 左移 a &lt;&lt; b &gt;&gt; 右移 a &gt;&gt; b &amp; 按位与 a &amp; b | 按位或 a | b ^ 异或 a == b &amp;= 按位与等于 a&amp;=b |= 按位或等于 a |= b ^= 按位异或等于 a^=b 类型转换 显式类型转换(强制转换) static_cast int ival = static_cast(4.14) dynamic_cast const_cast reinterpret_cast 隐式类型转换 算术转换 小类型可以提升大类型 int-&gt;double 高精度转低精度 会有警告 不支持舍入 double-&gt;int 3.14L + ‘a’ // ‘a’会转成asic 码","categories":[{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/categories/read-notes/"},{"name":"cpp-primer","slug":"read-notes/cpp-primer","permalink":"http://devhc.com/categories/read-notes/cpp-primer/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/tags/cpp/"},{"name":"cpp-primer","slug":"cpp-primer","permalink":"http://devhc.com/tags/cpp-primer/"},{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/tags/read-notes/"}]},{"title":"matlab 常用命令","slug":"matlab-matlab-octave","date":"2016-03-20T05:11:15.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"matlab/matlab-matlab-octave/","link":"","permalink":"http://devhc.com/matlab/matlab-matlab-octave/","excerpt":"matlab &amp; ocatve index 从1开始 length 长度 io data = open(“data.file”);","text":"matlab &amp; ocatve index 从1开始 length 长度 io data = open(“data.file”); cmd clear ; close all; clc clc：清除命令窗口的内容，对工作环境中的全部变量无任何影响 close：关闭当前的Figure窗口 close all:关闭所有的Figure窗口 clear：清除工作空间的所有变量 clear all：清除工作空间的所有变量，函数，和MEX文 fprintf(‘hello world \\n’) % comment convension X (m,n + 1) y (m,1) theta (n+1,1) matrix Utility 列用;分割 行用,分割 a = [1;2;3] X = data(:,1) 取第一列 X = data(:,[1,2]) 取1,2 列 获取非0序号 Find pos = find(y==1) size [m , n] = size(X) X = [ones(m, 1) X]; 全0矩阵 zeros(x,y) 全1矩阵 ones(x,y) 单位矩阵 I = eye(n) Identity Martix 矩阵赋值：assignment X(i,y) = n gen linspace (BASE, LIMIT, N) 123linspace(1,4,5)ans =1.0000 1.7500 2.5000 3.2500 4.0000 logspace(-2, 3, 5) 123logspace(-2, 3, 5)ans = 1.0000e-02 1.7783e-01 3.1623e+00 5.6234e+01 1.0000e+03 logic for123for i = 1:n do_something...end plot figure; % open a new figure window plot 3D:surf(X,Y,V) 等高线: contour(X,Y,V,logspace(-2,3,20)) minimizers options = optimset(‘GradObj’, ‘on’, ‘MaxIter’, 400); [theta, cost] = fminunc(@(t)(costFunction(t, X, y)), initial_theta, options);","categories":[{"name":"matlab","slug":"matlab","permalink":"http://devhc.com/categories/matlab/"}],"tags":[{"name":"matlab","slug":"matlab","permalink":"http://devhc.com/tags/matlab/"}]},{"title":"使用 commons-daemon 管理daemon 服务","slug":"java-Commons-Daemon","date":"2015-05-07T03:12:00.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"java/tools/java-Commons-Daemon/","link":"","permalink":"http://devhc.com/java/tools/java-Commons-Daemon/","excerpt":"","text":"简单介绍一下 Commons Daemon 可将一个普通的 Java 应用变成系统的一个后台服务。 &nbsp; JSVC Jsvc is a set of libraries and applications for making Java applications run on UNIX more easily.Jsvc allows the application (e.g. Tomcat) to perform some privileged operations as root (e.g. bind to a port &lt; 1024), and then switch identity to a non-privileged user. 安装： 介绍地址：http://commons.apache.org/proper/commons-daemon/jsvc.html wget http://apache.01link.hk//commons/daemon/source/commons-daemon-1.0.15-src.zip unzip commons-daemon-1.0.15-src.zip cd commons-daemon-1.0.15-src/src/native/unix ./configure --with-java=/usr/lib/jvm/java make sudo cp jsvc /usr/bin/ &nbsp; java server 如果是maven 项目 添加 &lt;dependency&gt; &lt;groupId&gt;commons-daemon&lt;/groupId&gt; &lt;artifactId&gt;commons-daemon&lt;/artifactId&gt; &lt;version&gt;1.0.15&lt;/version&gt; &lt;/dependency&gt; 创建server Daemon 入口 入口 public class Launcher implements Daemon { private Logger logger = LoggerFactory.getLogger(\"Launcher\"); @Override public void init(DaemonContext context) throws DaemonInitException, Exception { logger.info(\"init\"); } @Override public void start() throws Exception { logger.info(\"start\"); //....start your server } @Override public void stop() throws Exception { //.... stop your server logger.info(\"stop\"); } @Override public void destroy() { logger.info(\"destroy\"); } } 4.start your daemon server /usr/bin/jsvc -debug jar-with-deps.jar Laucher -debug 帮助调试查看 实际可去掉 &nbsp; &nbsp; 5.add service sudo vim /etc/init.d/xxx #!/bin/sh # # xxxx-server # # chkconfig: 2345 90 60 # description: xxxx JOB_PATH=/data/deploy/xxx EXEC=/usr/bin/jsvc CLASS_PATH=$JOB_PATH/xxx-server-0.0.1-SNAPSHOT.jar #LOG_OUT=$JOB_PATH/logs/job.log LOG_OUT=/dev/null #LOG_ERR=$JOB_PATH/logs/error.log LOG_ERR=/dev/null PID_FILE=$JOB_PATH/pid/server.pid #DEBUG=\"-debug\" MAIN_CLASS=com.xx.MainClass do_exec(){ $EXEC \\ -cp $CLASS_PATH \\ -outfile $LOG_OUT \\ -home /usr/lib/jvm/jre-1.7.0-openjdk.x86_64/ \\ -errfile $LOG_ERR \\ -pidfile $PID_FILE \\ $1 \\ $DEBUG \\ $MAIN_CLASS } case \"$1\" in start) do_exec ;; stop) do_exec \"-stop\" ;; restart) do_exec \"-stop\" do_exec ;; *) echo \"usage: {start|stop|restart}\" &gt;&amp;2 exit 3 ;; esac &nbsp; chmod +x /etc/init.d/xxx 启动服务 service xxx start 关闭服务 service xxx stop 重启服务 service xxx restart &nbsp; 添加到系统启动运行 注意 # chkconfig: 2345 90 60 # description: xxxx 这个是必须要有的 不然会报 service xxx does not support chkconfig xxx服务必须在运行级2，3，4，5下被启动或关闭，启动的优先级是90，关闭的优先级是60, 对于运行级说明如下 0：关机 1：单用户模式 2：无网络支持的多用户模式 3：有网络支持的多用户模式 4：保留，未使用 5：有网络支持有X-Window支持的多用户模式 6：重新引导系统，即重启 &nbsp; chkconfig –add xxx 就 ok 了 这样服务就可以开机启动 &nbsp; chkconfig –list 可以看到 xxx &nbsp; &nbsp;","categories":[{"name":"java","slug":"java","permalink":"http://devhc.com/categories/java/"},{"name":"tools","slug":"java/tools","permalink":"http://devhc.com/categories/java/tools/"}],"tags":[],"author":"wanghch"},{"title":"使用mutt + msmtp 配置 发送邮件","slug":"tools-mutt-sendmail","date":"2014-11-17T06:11:12.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"linux/tools/tools-mutt-sendmail/","link":"","permalink":"http://devhc.com/linux/tools/tools-mutt-sendmail/","excerpt":"","text":"msmtp + mutt 是一个非常好用的命令行发邮件工具 mutt 相当于 命令行 命令行 邮件客户端端 真正发送邮件由msmtp发送 msmtp 官方地址：http://sourceforge.jp/projects/sfnet_msmtp/ wget http://nchc.dl.sourceforge.net/sourceforge/msmtp/msmtp-1.4.17.tar.bz2 tar -jxvf msmtp-1.4.17.tar.bz2 cd msmtp-1.4.17 ./configure --prefix=/usr/local/msmtp make make install cd /usr/local/msmtp/ mkdir etc cd etc vim msmtprc 根据smtp 邮箱 配置 account default host smtp.xxxx.com port 465 timeout 30 auth on user xxx password xxxx logfile /var/log/msmtp.log auto_from off from xxx@xxx.com tls on tls_starttls off tls_certcheck off echo “test” | /usr/local/msmtp/bin/msmtp youemail@xxxx.com 测试msmtp 配置 是否正常 &nbsp; 安装mutt yum install mutt vim /etc/Muttrc 其中修改几个地方 &nbsp; set sendmail=”/usr/local/msmtp/bin/msmtp” set from=”xxx@xxx.com“ 这个可以是和 msmtp配置的不一样的 set realname=”xxx mail” 可以给from 起名称 set editor=”vim” set charset=”utf-8” set rfc2047_parameters=yes &nbsp; 发送带主题和附件的 echo “test mutt”|mutt -s “test subject 和中文 “ xxx@xxx.com -a ~attach file 如果你发送的内容在文件中可以这样 mutt -s “test subject 和中文 “ xxx@xxx.com -a ~attach file &lt; mail_content_file &nbsp;","categories":[{"name":"linux","slug":"linux","permalink":"http://devhc.com/categories/linux/"},{"name":"tools","slug":"linux/tools","permalink":"http://devhc.com/categories/linux/tools/"}],"tags":[{"name":"mail","slug":"mail","permalink":"http://devhc.com/tags/mail/"}],"author":"wanghch"},{"title":"CURL 投票PHP script","slug":"php-php-curl-votes","date":"2014-11-14T08:11:13.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"php/php-php-curl-votes/","link":"","permalink":"http://devhc.com/php/php-php-curl-votes/","excerpt":"","text":"今天有人问我curl相关，我就找到好几年前写的帮别人写的刷票一段代码，代码比较简单粗暴。 其中url 我删了 不方便写上。 &lt;?php $url = \"某公司 bbs 投票页\"; $post = array( 'xx' =&gt;xx, 'xx'=&gt;'xxx' ); $userAgent = getUserAgent(); $headers = array(); $headers['CLIENT-IP'] = getRandomIp(); $headers['X-FORWARDED-FOR'] = getRandomIp(); $headerArr = array(); foreach( $headers as $n =&gt; $v ) { $headerArr[] = $n .':' . $v; } $ch = curl_init(); $options = array( CURLOPT_URL =&gt; $url, CURLOPT_POST =&gt; 1, CURLOPT_RETURNTRANSFER =&gt; true, CURLOPT_POSTFIELDS =&gt; $post , CURLOPT_HTTPHEADER =&gt;$headerArr, CURLOPT_USERAGENT=&gt;$userAgent ); curl_setopt_array($ch, $options); $t = curl_exec($ch); curl_close($ch); $url = \"某公司bbs 帖子页 是为了刷访问 保证 投票 数和访问是一个级别\"; $userAgent = getUserAgent(); $headers = array(); $headers['CLIENT-IP'] = getRandomIp(); $headers['X-FORWARDED-FOR'] = getRandomIp(); $headerArr = array(); foreach( $headers as $n =&gt; $v ) { $headerArr[] = $n .':' . $v; } $ch = curl_init(); $options = array( CURLOPT_URL =&gt; $url, CURLOPT_POST =&gt; 1, CURLOPT_RETURNTRANSFER =&gt; true, CURLOPT_HTTPHEADER =&gt;$headerArr, CURLOPT_USERAGENT=&gt;$userAgent ); curl_setopt_array($ch, $options); $t = curl_exec($ch); curl_close($ch); function getRandomIp(){ $ip_long = array( array('607649792', '608174079'), //36.56.0.0-36.63.255.255 array('1038614528', '1039007743'), //61.232.0.0-61.237.255.255 array('1783627776', '1784676351'), //106.80.0.0-106.95.255.255 array('2035023872', '2035154943'), //121.76.0.0-121.77.255.255 array('2078801920', '2079064063'), //123.232.0.0-123.235.255.255 array('-1950089216', '-1948778497'), //139.196.0.0-139.215.255.255 array('-1425539072', '-1425014785'), //171.8.0.0-171.15.255.255 array('-1236271104', '-1235419137'), //182.80.0.0-182.92.255.255 array('-770113536', '-768606209'), //210.25.0.0-210.47.255.255 array('-569376768', '-564133889'), //222.16.0.0-222.95.255.255 ); $rand_key = mt_rand(0, 9); $ip= long2ip(mt_rand($ip_long[$rand_key][0], $ip_long[$rand_key][1])); return $ip; } function getUserAgent(){ $userAgentsList = array( \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11\",//taobao \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER\",//liebao \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400) \",//QQ \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; 360SE) \",//360 \"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1\",// \"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 SE 2.X MetaSr 1.0\",//sougou \"Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5\",//ipad \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\", \"Mozilla/5.0 (Linux; U; Android 2.2.1; zh-cn; HTC_Wildfire_A3333 Build/FRG83D) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1\" ); return $userAgentsList[rand(0,count($userAgentsList)-1)]; } &nbsp;","categories":[{"name":"php","slug":"php","permalink":"http://devhc.com/categories/php/"}],"tags":[{"name":"php","slug":"php","permalink":"http://devhc.com/tags/php/"}],"author":"wanghch"},{"title":"Shell 实用Tips","slug":"linux-shell-tips","date":"2014-08-26T06:13:00.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"linux/shell/linux-shell-tips/","link":"","permalink":"http://devhc.com/linux/shell/linux-shell-tips/","excerpt":"","text":"获取script所在目录 1JOB_PATH=$(cd \"$(dirname \"$0\")\"; pwd) 根据名称kill script 1ps aux|grep $name|grep -v grep|awk '&#123;print $2&#125;'|xargs kill -s 9 根据参数获取当前日期，默认当天 12345if [ -z \"$1\" ]; then date=`date +\"%Y-%m-%d\"`;else date=`date -d \"$1\" +\"%Y-%m-%d\"`;fi 获取其他script输出赋给变量 12a=`php -r \"echo 1;\"`echo $a 获取内存占用前10进程 1bash ps aux|sort -k4r|head -n 10 查看一个目录下总文件大小和 1bash du -sh . 环境变量设置 系统 /etc/profile /etc/bashrc 个人 ~/.bash_profile ~/.bashrc 推荐：/etc/profile.d/ 比如新增hive加入path 建立一个/etc/profile.d/hive.sh 12export HIVE_HOME=/opt/hivePATH=$HIVE_HOME/bin:$PATH shell实用快捷键 Ctrl + a 光标切换到行首（经常用） Ctrl + e 光标切换到行尾 cd - 切换到上次目录 !! 上次命令（一般使用 针对忘记打sudo，下面打sudo !!即可） Ctrl ＋l 清屏 Ctrl + f / Ctrl +b 等同左右箭頭 Ctrl + k 剪切光標后 Ctrl + u 剪切光標前 Ctrl + y 粘贴shell剪切板 （注意这三个命令和系统剪切板不共享） 统计目录各文件夹大小 123for dir in `ls`; do du -sh $dir;done 搜索一个目录下文件 含有关键字 keyword的文件 1find . -type f |xargs grep keyword","categories":[{"name":"linux","slug":"linux","permalink":"http://devhc.com/categories/linux/"},{"name":"shell","slug":"linux/shell","permalink":"http://devhc.com/categories/linux/shell/"}],"tags":[{"name":"shell","slug":"shell","permalink":"http://devhc.com/tags/shell/"}]},{"title":"capistrano使用","slug":"tools-Capistrano","date":"2013-11-21T04:12:11.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"tools/tools-Capistrano/","link":"","permalink":"http://devhc.com/tools/tools-Capistrano/","excerpt":"先简单介绍下Capistrano Capistrano是一种在多台服务器上运行脚本的开源工具，它主要用于部署web应用。它自动完成多台服务器上新版本的同步更新，包括数据库的改变。Capistrano最初由Jamis Buck用Ruby开发，并用RubyGems部署渠道部署。现在Capistrano不仅限于应用Ruby on Rails的 web应用框架，而且可以用于部署用其他框架的web应用程序，比如用PHP开发的。Capistran最初是用来应用于bash指令行。现在Ruby on Rails框架的用于也可以使用它的新特性，例如，对当前web应用部署改变使其更新版本，或者使其回滚到之前的旧版本。 如何使用 Capistrano最新版本是v3，但是v3暂时只支持git协议，如果想使用svn等其他协议可以用v2，所以下面主要是针对v2. 1.安装： gem install capistrano（需要先安装ruby） 装完后会有两个工具脚本加入环境变量 1.cap 调用capistrano task 2.capify 初始化目录","text":"先简单介绍下Capistrano Capistrano是一种在多台服务器上运行脚本的开源工具，它主要用于部署web应用。它自动完成多台服务器上新版本的同步更新，包括数据库的改变。Capistrano最初由Jamis Buck用Ruby开发，并用RubyGems部署渠道部署。现在Capistrano不仅限于应用Ruby on Rails的 web应用框架，而且可以用于部署用其他框架的web应用程序，比如用PHP开发的。Capistran最初是用来应用于bash指令行。现在Ruby on Rails框架的用于也可以使用它的新特性，例如，对当前web应用部署改变使其更新版本，或者使其回滚到之前的旧版本。 如何使用 Capistrano最新版本是v3，但是v3暂时只支持git协议，如果想使用svn等其他协议可以用v2，所以下面主要是针对v2. 1.安装： gem install capistrano（需要先安装ruby） 装完后会有两个工具脚本加入环境变量 1.cap 调用capistrano task 2.capify 初始化目录 2.初始化部署脚本 mkdir capProject cd capProject capify . Capfile 部署脚本入口文件 config 配置目录 &nbsp; deploy.rb配置 https://github.com/capistrano/capistrano/wiki/2.x-Significant-Configuration-Variables 1.配置版本控制使用git管理代码set :scm, :git使用svn管理代码set :scm, :subversion 2.设置版本控制用户名密码 set :scm_username,’xx’set :scm_password,’xx’ 3.设置repository地址 set :repository, “https://xxxx.git&quot; 4.设置web服务器地址 多个逗号分隔，注释掉:role app和:role db在php部署中不需要 role :web, “devhc.com” 多台服务器 role :web, “devhc.com”,”devhc1.com” 5.设置ssh密码（如果设置sshkey nopassword方式访问则不填写） set :username,’xx’set :password,’xx’ 6.设置部署目标位置 set :deploy_to,”/var/www/#{application}” 这里是引用了application的名字，若application名称为blog，则部署位置为/var/www/blog 7.杂项设置（可选） 非ruby项目该值都设为false，不然会提示public文件夹不存在 set :normalize_asset_timestamps,false 设置需要共享的目录 默认是： %w(public/system log tmp/pids) 没有就设空set :shared_children,%w() 如yii框架中assets和protected/runtime需要共享 set :shared_children, %w(assets protected/runtime protected/config) 保持最新release个数 set :keep_releases,5 &nbsp; 设置current_path，即当前版本目录，其实是一个软连接，执行release中最新版本代码,如果是apache为服务器，则为其web目录,默认则为 deploy_path/current,如果使用默认的话需要改下apache配置指向这里 set current_path,’/var/www/xxx’ &nbsp; 实例配置如下： set :application, \"xxx\" set :repository, \"https://xxxx.git\" set :normalize_asset_timestamps,false set :deploy_to,\"/var/www/#{application}\" set :scm,:git set :username,'xx' set :password,'xx' set :use_sudo,true set :keep_releases,5 set :shared_children, %w(assets protected/runtime) role :web, \"devhc.com\" &nbsp; 部署脚本使用 cap deploy:setup 初始化目录 release，shared目录 &nbsp; cap deploy 执行部署 &nbsp; 多环境部署 通常项目部署有sandbox,ready,production等环境，分别一一设置部署比较麻烦，通过capistrano就很方便解决这个问题。 1.使用Multistage Extension扩展 通过gem安装capistrano-ext扩展 mkdir config/deploy 新建stages配置目录 #deploy.rb中引入扩展和配置stages set :stages, %w(production sandbox) set :default_stage, \"sandbox\" require 'capistrano/ext/multistage' #config/deploy/production.rb role :web, \"devhc.com\" set :deploy_to, \"/var/www/#{application}-production/\" #config/deploy/sandbox.rb role :web, \"sandbox.devhc.com\" set :deploy_to, \"/var/www/#{application}-sandbox/\" cap sandbox deploy #部署沙盒cap production deploy #部署线上 不使用Multistage Extension实现多环境部署set :application, 'example-website' task :production do role :web, “devhc.com” set :deploy_to, “/var/www/#{application}-production/“ set :deploy_via, :remote_cacheend task :sandbox do role :web, “localhost” set :deploy_to, “/var/www/#{application}-sandbox/“ set :deploy_via, :copyend&nbsp;","categories":[{"name":"tools","slug":"tools","permalink":"http://devhc.com/categories/tools/"}],"tags":[{"name":"deploy","slug":"deploy","permalink":"http://devhc.com/tags/deploy/"}]},{"title":"ios 打开其他应用","slug":"ios-ios-open-app","date":"2013-10-23T03:08:00.000Z","updated":"2020-11-25T01:25:37.665Z","comments":true,"path":"ios/ios-ios-open-app/","link":"","permalink":"http://devhc.com/ios/ios-ios-open-app/","excerpt":"[[UIApplication sharedApplication] openURL:[NSURL URLWithString:appString]]; 1、打开系统应用打电话：[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@”tel://123456”]]; 打开浏览器：[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@”http://devhc.com&quot;]]; 其他url格式如下表所示：","text":"[[UIApplication sharedApplication] openURL:[NSURL URLWithString:appString]]; 1、打开系统应用打电话：[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@”tel://123456”]]; 打开浏览器：[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@”http://devhc.com&quot;]]; 其他url格式如下表所示： Apple URL Scheme Reference Application URI Scheme or Protocol Query Strings Default e-mail application mailto:&lt;email&gt;?query Subject CC BCC Body Default phone application tel:&lt;number&gt; N/A Default SMS application sms:&lt;number&gt; N/A Syndication feed reader feed:&lt;url&gt; N/A Apple FaceTime facetime:&lt;number&gt; N/A http://handleopenurl.com/ 可以查看其它协议相关接口，比如qq 2、打开自定义app首先在要打开的比如app2中 定义在info.plist URL Schemas 在app1中打开 [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@“myapp://”]]; 打开回调 - (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation (Available in iOS 4.2 and later) - (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL*)url (ios 4.2 Deprecated) &nbsp;","categories":[{"name":"ios","slug":"ios","permalink":"http://devhc.com/categories/ios/"}],"tags":[{"name":"ios","slug":"ios","permalink":"http://devhc.com/tags/ios/"}],"author":"wanghch"}]}